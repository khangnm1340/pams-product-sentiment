# -*- coding: utf-8 -*-
"""datamining

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SXRRDlC6qwGn3fgICGLUolcTnOwRZaIJ
"""

from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
file_posts = "/content/drive/MyDrive/ColabNotebooks/all_posts_hanni.csv"
file_comments = "/content/drive/MyDrive/ColabNotebooks/all_comments_hanni.csv"

try:
     # Đọc file posts
    posts = pd.read_csv(file_posts)
    print(f"Các cột trong file '{file_posts}' là:")
    print(posts.columns.tolist())
    print("-" * 30)

    # Đọc file comments
    comments = pd.read_csv(file_comments)
    print(f"Các cột trong file '{file_comments}' là:")
    print(comments.columns.tolist())

except FileNotFoundError:
    print("Lỗi: Không tìm thấy file. Vui lòng kiểm tra lại tên file và đường dẫn.")
except Exception as e:
    print(f"Đã xảy ra lỗi: {e}")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set style cho đẹp
sns.set(style="whitegrid")

# Đọc dữ liệu
posts = pd.read_csv('/content/drive/MyDrive/ColabNotebooks/all_posts_hanni.csv')
comments = pd.read_csv('/content/drive/MyDrive/ColabNotebooks/all_comments_hanni.csv')

print("Posts:", posts.shape)
print("Comments:", comments.shape)

print(posts.info())
print(comments.info())

print(posts.head(3))
print(comments.head(3))

#xử lí thời gian (Cột created_utc là timestamp → convert sang datetime.)
posts['created_utc'] = pd.to_datetime(posts['created_utc'], unit='s', errors='coerce')
comments['created_utc'] = pd.to_datetime(comments['created_utc'], unit='s', errors='coerce')

#Thống kê cơ bản cho từng subreddit (Bao nhiêu post, bao nhiêu comment mỗi subreddit)
# Số lượng posts theo subreddit
post_counts = posts['subreddit'].value_counts()

plt.figure(figsize=(10,6))
sns.barplot(y=post_counts.index, x=post_counts.values, palette="viridis")
plt.title("Số lượng posts trong mỗi subreddit")
plt.xlabel("Số lượng posts")
plt.ylabel("Subreddit")
plt.show()

# Số lượng comments theo subreddit
comment_counts = comments['subreddit'].value_counts()

plt.figure(figsize=(10,6))
sns.barplot(y=comment_counts.index, x=comment_counts.values, palette="magma")
plt.title("Số lượng comments trong mỗi subreddit")
plt.xlabel("Số lượng comments")
plt.ylabel("Subreddit")
plt.show()

#PHÂN TÍCH NỘI DUNG CƠ BẢN
# Độ dài text
posts['title_length'] = posts['title'].astype(str).apply(len)
posts['selftext_length'] = posts['selftext'].astype(str).apply(len)
comments['body_length'] = comments['body'].astype(str).apply(len)

# Histogram độ dài comment
plt.figure(figsize=(10,6))
sns.histplot(comments['body_length'], bins=50, kde=True, color='blue')
plt.title("Phân phối độ dài comments")
plt.xlabel("Số ký tự")
plt.show()

# Trung bình độ dài comment mỗi subreddit
avg_comment_len = comments.groupby('subreddit')['body_length'].mean().sort_values()

plt.figure(figsize=(10,6))
sns.barplot(y=avg_comment_len.index, x=avg_comment_len.values, palette="coolwarm")
plt.title("Độ dài trung bình comment theo subreddit")
plt.xlabel("Độ dài trung bình (ký tự)")
plt.ylabel("Subreddit")
plt.show()

#SCORE , UPVOTE ( THỂ HIỆN SỰ QUAN TÂM ĐẾN POST/COMMENT)

# Phân phối score của posts
plt.figure(figsize=(10,6))
sns.boxplot(x='subreddit', y='score', data=posts)
plt.xticks(rotation=45)
plt.title("Phân phối score của posts theo subreddit")
plt.show()

# Trung bình score của comments theo subreddit
avg_comment_score = comments.groupby('subreddit')['score'].mean().sort_values()

plt.figure(figsize=(10,6))
sns.barplot(y=avg_comment_score.index, x=avg_comment_score.values, palette="cubehelix")
plt.title("Score trung bình của comments theo subreddit")
plt.xlabel("Score trung bình")
plt.ylabel("Subreddit")
plt.show()

#KHI NÀO POST/COMMENT NHIỀU NHẤT
# Posts theo tháng
posts['month'] = posts['created_utc'].dt.to_period('M')
post_monthly = posts.groupby('month').size()

plt.figure(figsize=(12,6))
post_monthly.plot(kind='bar')
plt.title("Số lượng posts theo tháng")
plt.xlabel("Tháng")
plt.ylabel("Số lượng posts")
plt.show()

# Comments theo giờ
comments['hour'] = comments['created_utc'].dt.hour
plt.figure(figsize=(12,6))
sns.countplot(x='hour', data=comments, palette="plasma")
plt.title("Số lượng comments theo giờ")
plt.xlabel("Giờ trong ngày")
plt.ylabel("Số lượng comments")
plt.show()

# TOP AUTHORS ( AI LÀ NGƯỜI HOẠT ĐỘNG TÍCH CỰC NHẤT )
# Top 10 authors post
plt.figure(figsize=(10,6))
posts['author'].value_counts().head(10).plot(kind='bar', color='green')
plt.title("Top 10 authors đăng post nhiều nhất")
plt.show()

# Top 10 authors comment
plt.figure(figsize=(10,6))
comments['author'].value_counts().head(10).plot(kind='bar', color='orange')
plt.title("Top 10 authors comment nhiều nhất")
plt.show()

#WORDCLOUD (XEM CÁC TỪ KHÓA XUẤT HIỆN NHIỀU NHẤT)
from wordcloud import WordCloud, STOPWORDS

# WordCloud cho titles
text = " ".join(posts['title'].dropna().astype(str).tolist())
wc = WordCloud(stopwords=STOPWORDS, background_color="white", width=1200, height=600).generate(text)

plt.figure(figsize=(12,6))
plt.imshow(wc, interpolation='bilinear')
plt.axis("off")
plt.title("WordCloud - Post Titles")
plt.show()

# WordCloud cho comments
text = " ".join(comments['body'].dropna().astype(str).tolist()[:50000]) # sample cho nhẹ
wc = WordCloud(stopwords=STOPWORDS, background_color="white", width=1200, height=600).generate(text)

plt.figure(figsize=(12,6))
plt.imshow(wc, interpolation='bilinear')
plt.axis("off")
plt.title("WordCloud - Comments")
plt.show()